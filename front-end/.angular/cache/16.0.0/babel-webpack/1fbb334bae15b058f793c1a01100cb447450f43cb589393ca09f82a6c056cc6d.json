{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { filter } from 'rxjs';\nimport { NavigationEnd } from '@angular/router';\nlet ProductListComponent = class ProductListComponent {\n  constructor(productService, cartService, router) {\n    this.productService = productService;\n    this.cartService = cartService;\n    this.router = router;\n    this.apiURL = \"http://localhost:8080/\";\n    this.currentPage = 1; // <-- Add this property here\n    this.itemsPerPage = 10; // If you're also using itemsPerPage \n    this.products = [];\n    this.productQuantities = {}; // Object to store product quantities\n    this.currentCategory = '';\n  }\n  ngOnInit() {\n    // Initial load of products\n    this.productService.getProducts(0).subscribe(data => {\n      this.products = data;\n    });\n    // Subscribe to categorySelected\n    this.categorySubscription = this.productService.categorySelected$.subscribe(category => {\n      this.currentCategory = category; // Set the current category here\n      if (category === 'All') {\n        this.productService.getProducts(0).subscribe(data => {\n          this.products = data;\n        });\n      } else {\n        this.productService.getProductsByCategory(category, 0).subscribe(data => {\n          this.products = data;\n        });\n      }\n    });\n    this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(event => {\n      // Refresh username\n      if (event.url === '/' || event.url === '') {\n        this.productService.getProducts(0).subscribe(data => {\n          this.products = data;\n        });\n        // Execute some code here if navigated to home page\n      }\n      // // Emit hideProductList\n      // if (this.username) {\n      //   this.userLoggedIn.emit();\n      //   // Execute some code here when username exists\n      // }\n    });\n  }\n\n  addToCart(product) {\n    this.cartService.addProduct(product);\n  }\n  onPageChange(page) {\n    this.currentPage = page;\n    // Check for selected category and load products accordingly\n    let currentCategory = this.productService.getCurrentCategory();\n    if (currentCategory === 'All') {\n      this.productService.getProducts(this.currentPage - 1).subscribe(data => {\n        this.products = data;\n        // You might also want to update totalItems here based on the response, for the paginator to work correctly.\n      });\n    } else {\n      this.productService.getProductsByCategory(currentCategory, this.currentPage - 1).subscribe(data => {\n        this.products = data;\n        // You might also want to update totalItems here based on the response, for the paginator to work correctly.\n      });\n    }\n  }\n};\n\nProductListComponent = __decorate([Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.css']\n})], ProductListComponent);\nexport { ProductListComponent };","map":{"version":3,"names":["Component","filter","NavigationEnd","ProductListComponent","constructor","productService","cartService","router","apiURL","currentPage","itemsPerPage","products","productQuantities","currentCategory","ngOnInit","getProducts","subscribe","data","categorySubscription","categorySelected$","category","getProductsByCategory","events","pipe","event","url","addToCart","product","addProduct","onPageChange","page","getCurrentCategory","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\msitr\\OneDrive\\Desktop\\ElectronicStore2\\Electronic_Store\\front-end\\src\\app\\product-list\\product-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ProductService } from '../service/product.service';\r\nimport { Product } from '../models/product.model';\r\nimport { CartService } from '../service/cart.service';\r\nimport { Subscription, filter } from 'rxjs';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-product-list',\r\n  templateUrl: './product-list.component.html',\r\n  styleUrls: ['./product-list.component.css']\r\n})\r\nexport class ProductListComponent implements OnInit {\r\n\r\n  apiURL = \"http://localhost:8080/\"\r\n  currentPage = 1; // <-- Add this property here\r\n  itemsPerPage = 10; // If you're also using itemsPerPage \r\n  products: Product[] = [];\r\n  productQuantities: { [key: number]: number } = {}; // Object to store product quantities\r\n  categorySubscription!: Subscription;\r\n  currentCategory: string = '';\r\n\r\n\r\n  constructor(\r\n    private productService: ProductService,\r\n    private cartService: CartService,\r\n    private router: Router\r\n  ) { }\r\n\r\n\r\n  ngOnInit(): void {\r\n\r\n    // Initial load of products\r\n    this.productService.getProducts(0).subscribe(data => {\r\n      this.products = data;\r\n    });\r\n\r\n    // Subscribe to categorySelected\r\n    this.categorySubscription = this.productService.categorySelected$.subscribe((category: string) => {\r\n      this.currentCategory = category; // Set the current category here\r\n\r\n      if (category === 'All') {\r\n        this.productService.getProducts(0).subscribe(data => {\r\n          this.products = data;\r\n        });\r\n      } else {\r\n        this.productService.getProductsByCategory(category,0).subscribe(data => {\r\n          this.products = data;\r\n        });\r\n      }\r\n    });\r\n\r\n\r\n    this.router.events.pipe(\r\n      filter((event): event is NavigationEnd => event instanceof NavigationEnd)\r\n    ).subscribe((event: NavigationEnd) => {\r\n      // Refresh username\r\n      if (event.url === '/' || event.url === '') {\r\n        this.productService.getProducts(0).subscribe(data => {\r\n          this.products = data;\r\n        });\r\n        // Execute some code here if navigated to home page\r\n      }\r\n    \r\n\r\n      // // Emit hideProductList\r\n      // if (this.username) {\r\n      //   this.userLoggedIn.emit();\r\n      //   // Execute some code here when username exists\r\n      // }\r\n        \r\n\r\n    });\r\n    \r\n  }\r\n\r\n  addToCart(product: Product): void {\r\n    this.cartService.addProduct(product);\r\n  }\r\n\r\n  \r\n\r\n  onPageChange(page: number) {\r\n    this.currentPage = page;\r\n    \r\n    // Check for selected category and load products accordingly\r\n    let  currentCategory = this.productService.getCurrentCategory();\r\n    \r\n    if (currentCategory === 'All') {\r\n      this.productService.getProducts(this.currentPage - 1).subscribe(data => { // Page number starts from 0 in the backend\r\n        this.products = data;\r\n        // You might also want to update totalItems here based on the response, for the paginator to work correctly.\r\n      });\r\n    } else {\r\n\r\n\r\n      this.productService.getProductsByCategory(currentCategory, this.currentPage - 1).subscribe(data => {\r\n        this.products = data;\r\n        // You might also want to update totalItems here based on the response, for the paginator to work correctly.\r\n      });\r\n    }\r\n  }\r\n  \r\n  \r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}