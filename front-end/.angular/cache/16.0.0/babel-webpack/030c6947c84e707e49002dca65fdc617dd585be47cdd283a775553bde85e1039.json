{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass OrderService {\n  constructor(http) {\n    this.http = http;\n    this.orderAPI = 'http://localhost:8080/orders'; // Replace with your order API\n    this.updateAddressAPI = 'http://localhost:8080/user/update-address'; // Replace with your update address API\n  }\n\n  createOrder(orderData) {\n    const headers = this.createHeaders();\n    return this.http.post(this.orderAPI, orderData, {\n      headers: headers,\n      withCredentials: true\n    });\n  }\n  updateAddress(addressData) {\n    const headers = this.createHeaders();\n    return this.http.post(this.updateAddressAPI, addressData, {\n      headers: headers,\n      withCredentials: true,\n      responseType: 'text'\n    });\n  }\n  createHeaders() {\n    const csrfToken = this.getCSRFToken();\n    const username = localStorage.getItem('username');\n    const password = localStorage.getItem('password');\n    console.log(\"username:\" + username);\n    console.log(\"password:\" + password);\n    console.log(\"token:\" + csrfToken);\n    let headers = new HttpHeaders();\n    if (csrfToken) {\n      headers = headers.append('x-csrf-token', csrfToken);\n    }\n    if (username && password) {\n      headers = headers.append('Authorization', 'Basic ' + btoa(username + ':' + password));\n    }\n    return headers;\n  }\n  getCSRFToken() {\n    return localStorage.getItem('csrfToken');\n  }\n}\nOrderService.ɵfac = function OrderService_Factory(t) {\n  return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient));\n};\nOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrderService,\n  factory: OrderService.ɵfac,\n  providedIn: 'root'\n});\nexport { OrderService };","map":{"version":3,"names":["HttpHeaders","OrderService","constructor","http","orderAPI","updateAddressAPI","createOrder","orderData","headers","createHeaders","post","withCredentials","updateAddress","addressData","responseType","csrfToken","getCSRFToken","username","localStorage","getItem","password","console","log","append","btoa","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\msitr\\OneDrive\\Desktop\\ElectronicStore2\\Electronic_Store\\front-end\\src\\app\\service\\order.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n  private orderAPI = 'http://localhost:8080/orders'; // Replace with your order API\r\n  private updateAddressAPI = 'http://localhost:8080/user/update-address'; // Replace with your update address API\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  createOrder(orderData: any): Observable<any> {\r\n    const headers = this.createHeaders();\r\n    return this.http.post(this.orderAPI, orderData, { headers: headers, withCredentials: true });\r\n  }\r\n  \r\n\r\n  updateAddress(addressData: any): Observable<any> {\r\n    const headers = this.createHeaders();\r\n    return this.http.post(this.updateAddressAPI, addressData, { headers: headers, withCredentials: true , responseType: 'text' });\r\n  }\r\n\r\n  private createHeaders(): HttpHeaders {\r\n    const csrfToken = this.getCSRFToken();\r\n    const username = localStorage.getItem('username');\r\n    const password = localStorage.getItem('password');\r\n    console.log(\"username:\" + username)\r\n    console.log(\"password:\" + password);\r\n    console.log(\"token:\" + csrfToken);\r\n    let headers = new HttpHeaders();\r\n    if(csrfToken) {\r\n      headers = headers.append('x-csrf-token', csrfToken);\r\n    }\r\n\r\n    if(username && password) {\r\n      headers = headers.append('Authorization', 'Basic ' + btoa(username + ':' + password));\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  private getCSRFToken(): string | null {\r\n    return localStorage.getItem('csrfToken');\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAG9D,MAGaC,YAAY;EAIvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,QAAQ,GAAG,8BAA8B,CAAC,CAAC;IAC3C,KAAAC,gBAAgB,GAAG,2CAA2C,CAAC,CAAC;EAEhC;;EAExCC,WAAWA,CAACC,SAAc;IACxB,MAAMC,OAAO,GAAG,IAAI,CAACC,aAAa,EAAE;IACpC,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,IAAI,CAACN,QAAQ,EAAEG,SAAS,EAAE;MAAEC,OAAO,EAAEA,OAAO;MAAEG,eAAe,EAAE;IAAI,CAAE,CAAC;EAC9F;EAGAC,aAAaA,CAACC,WAAgB;IAC5B,MAAML,OAAO,GAAG,IAAI,CAACC,aAAa,EAAE;IACpC,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,IAAI,CAACL,gBAAgB,EAAEQ,WAAW,EAAE;MAAEL,OAAO,EAAEA,OAAO;MAAEG,eAAe,EAAE,IAAI;MAAGG,YAAY,EAAE;IAAM,CAAE,CAAC;EAC/H;EAEQL,aAAaA,CAAA;IACnB,MAAMM,SAAS,GAAG,IAAI,CAACC,YAAY,EAAE;IACrC,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,MAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjDE,OAAO,CAACC,GAAG,CAAC,WAAW,GAAGL,QAAQ,CAAC;IACnCI,OAAO,CAACC,GAAG,CAAC,WAAW,GAAGF,QAAQ,CAAC;IACnCC,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAGP,SAAS,CAAC;IACjC,IAAIP,OAAO,GAAG,IAAIR,WAAW,EAAE;IAC/B,IAAGe,SAAS,EAAE;MACZP,OAAO,GAAGA,OAAO,CAACe,MAAM,CAAC,cAAc,EAAER,SAAS,CAAC;;IAGrD,IAAGE,QAAQ,IAAIG,QAAQ,EAAE;MACvBZ,OAAO,GAAGA,OAAO,CAACe,MAAM,CAAC,eAAe,EAAE,QAAQ,GAAGC,IAAI,CAACP,QAAQ,GAAG,GAAG,GAAGG,QAAQ,CAAC,CAAC;;IAGvF,OAAOZ,OAAO;EAChB;EAEQQ,YAAYA,CAAA;IAClB,OAAOE,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC1C;;AAtCWlB,YAAY,C;mBAAZA,YAAY,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAZ3B,YAAY,C;SAAZA,YAAY;EAAA4B,OAAA,EAAZ5B,YAAY,CAAA6B,IAAA;EAAAC,UAAA,EAFX;AAAM;SAEP9B,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}