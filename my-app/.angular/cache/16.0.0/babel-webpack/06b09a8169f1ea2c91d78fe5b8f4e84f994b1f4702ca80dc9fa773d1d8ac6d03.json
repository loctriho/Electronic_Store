{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nclass AuthGuard {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(next, state) {\n    const username = localStorage.getItem('username');\n    if (username) {\n      return true;\n    }\n    // Save the attempted URL in localStorage\n    localStorage.setItem('previous_url', state.url);\n    // If username doesn't exist, redirect to login page\n    this.router.navigate(['/login']).then(() => {\n      // Clear the stored redirect URL after successful login\n      localStorage.removeItem('redirectUrl');\n    });\n    return false;\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthGuard };","map":{"version":3,"names":["AuthGuard","constructor","router","canActivate","next","state","username","localStorage","getItem","setItem","url","navigate","then","removeItem","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\msitr\\OneDrive\\Desktop\\AngularProject\\my-app\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private router: Router) {}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n      \n    const username = localStorage.getItem('username');\n  \n    if (username) {\n      return true;\n    }\n  \n    // Save the attempted URL in localStorage\n    localStorage.setItem('previous_url', state.url);\n  \n    // If username doesn't exist, redirect to login page\n    this.router.navigate(['/login']).then(() => {\n      // Clear the stored redirect URL after successful login\n      localStorage.removeItem('redirectUrl');\n    });\n    return false;\n  }\n  \n}\n"],"mappings":";;AAIA,MAGaA,SAAS;EAEpBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAErCC,WAAWA,CACTC,IAA4B,EAC5BC,KAA0B;IAE1B,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAEjD,IAAIF,QAAQ,EAAE;MACZ,OAAO,IAAI;;IAGb;IACAC,YAAY,CAACE,OAAO,CAAC,cAAc,EAAEJ,KAAK,CAACK,GAAG,CAAC;IAE/C;IACA,IAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,MAAK;MACzC;MACAL,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;IACxC,CAAC,CAAC;IACF,OAAO,KAAK;EACd;;AAvBWb,SAAS,C;mBAATA,SAAS,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;AAAA;AAATjB,SAAS,C;SAATA,SAAS;EAAAkB,OAAA,EAATlB,SAAS,CAAAmB,IAAA;EAAAC,UAAA,EAFR;AAAM;SAEPpB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}