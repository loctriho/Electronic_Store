{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { RoundDownPipe } from '../pipe/round-down.pipe';\nimport * as i0 from \"@angular/core\";\nclass CartService {\n  constructor() {\n    this.cart = [];\n    this.cartQuantities = {}; // Object to store cart product quantities\n    this.roundDownPipe = new RoundDownPipe();\n    this.cartItemCount = new Subject(); // Declare a new Subject for the cart item count\n  }\n\n  addProduct(product) {\n    // Check if the productId already exists in the cartQuantities object\n    if (!this.cartQuantities.hasOwnProperty(product.productId)) {\n      const quantity = this.cartQuantities[product.productId] || 0;\n      this.cartQuantities[product.productId] = quantity + 1;\n      this.cart.push(product);\n      this.cartItemCount.next(this.getCartSize()); // Emit the new cart size\n    }\n  }\n\n  removeProduct(product) {\n    const quantity = this.cartQuantities[product.productId] || 0;\n    if (quantity > 0) {\n      this.cartQuantities[product.productId] = quantity - 1;\n      const index = this.cart.findIndex(p => p.productId === product.productId);\n      if (index > -1) {\n        this.cart.splice(index, 1);\n      }\n      this.cartItemCount.next(this.getCartSize()); // Emit the new cart size\n    }\n    // Check if the quantity is 0, then delete the productId from cartQuantities\n    if (this.cartQuantities[product.productId] === 0) {\n      delete this.cartQuantities[product.productId];\n    }\n  }\n  getCart() {\n    return [...this.cart];\n  }\n  getCartSize() {\n    return this.cart.length;\n  }\n  getTotalPrice() {\n    let total = this.cart.reduce((total, product) => total + product.price * this.getQuantity(product), 0);\n    return this.roundDownPipe.transform(total);\n  }\n  clearCart() {\n    this.cart = [];\n    this.cartQuantities = {};\n    this.cartItemCount.next(0);\n  }\n  updateCartItemCount() {\n    // Implement your logic to update the cart item count\n  }\n  getQuantity(product) {\n    return this.cartQuantities[product.productId] || 0;\n  }\n  setQuantity(product, quantity) {\n    if (quantity >= 0) {\n      this.cartQuantities[product.productId] = quantity;\n    }\n  }\n  getCartQuantities() {\n    return this.cartQuantities;\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});\nexport { CartService };","map":{"version":3,"names":["Subject","RoundDownPipe","CartService","constructor","cart","cartQuantities","roundDownPipe","cartItemCount","addProduct","product","hasOwnProperty","productId","quantity","push","next","getCartSize","removeProduct","index","findIndex","p","splice","getCart","length","getTotalPrice","total","reduce","price","getQuantity","transform","clearCart","updateCartItemCount","setQuantity","getCartQuantities","factory","ɵfac","providedIn"],"sources":["C:\\Users\\msitr\\OneDrive\\Desktop\\AngularProject\\my-app\\src\\app\\service\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Product } from '../models/product.model';\r\nimport { Subject } from 'rxjs';\r\nimport { RoundDownPipe }   from '../pipe/round-down.pipe';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n  private cart: Product[] = [];\r\n  private cartQuantities: { [key: number]: number } = {}; // Object to store cart product quantities\r\n  private roundDownPipe = new RoundDownPipe();\r\n\r\n  cartItemCount = new Subject<number>(); // Declare a new Subject for the cart item count\r\n\r\n  constructor() {}\r\n\r\n  addProduct(product: Product): void {\r\n    // Check if the productId already exists in the cartQuantities object\r\n    if (!this.cartQuantities.hasOwnProperty(product.productId)) {\r\n        const quantity = this.cartQuantities[product.productId] || 0;\r\n        this.cartQuantities[product.productId] = quantity + 1;\r\n        this.cart.push(product);\r\n        this.cartItemCount.next(this.getCartSize()); // Emit the new cart size\r\n    }\r\n}\r\n\r\nremoveProduct(product: Product): void {\r\n    const quantity = this.cartQuantities[product.productId] || 0;\r\n    if (quantity > 0) {\r\n        this.cartQuantities[product.productId] = quantity - 1;\r\n        const index = this.cart.findIndex(p => p.productId === product.productId);\r\n        if (index > -1) {\r\n            this.cart.splice(index, 1);\r\n        }\r\n        this.cartItemCount.next(this.getCartSize()); // Emit the new cart size\r\n    }\r\n    // Check if the quantity is 0, then delete the productId from cartQuantities\r\n    if (this.cartQuantities[product.productId] === 0) {\r\n        delete this.cartQuantities[product.productId];\r\n    }\r\n}\r\n\r\n\r\n  getCart(): Product[] {\r\n    return [...this.cart];\r\n  }\r\n\r\n  getCartSize(): number {\r\n    return this.cart.length;\r\n  }\r\n\r\n  getTotalPrice(): number {\r\n    let total = this.cart.reduce((total, product) => total + (product.price * this.getQuantity(product)), 0);\r\n    return this.roundDownPipe.transform(total);\r\n  }\r\n  \r\n\r\n  clearCart(): void {\r\n    this.cart = [];\r\n    this.cartQuantities = {};\r\n    this.cartItemCount.next(0);\r\n  }\r\n\r\n  updateCartItemCount(): void {\r\n    // Implement your logic to update the cart item count\r\n  }\r\n\r\n  getQuantity(product: Product): number {\r\n    return this.cartQuantities[product.productId] || 0;\r\n  }\r\n\r\n  setQuantity(product: Product, quantity: number): void {\r\n    if (quantity >= 0) {\r\n      this.cartQuantities[product.productId] = quantity;\r\n    }\r\n  }\r\n\r\n  getCartQuantities(){\r\n    return this.cartQuantities;\r\n    \r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}